#!/usr/bin/env node
const fs = require('fs');
const puppeteer = require('puppeteer');

const args = process.argv.slice(2);

const options = {
    url: null,
    filepath: null,
    html: null,
    pdfMarginTop: 0,
    pdfMarginLeft: 0,
    pdfMarginRight: 0,
    pdfMarginBottom: 0,
    pdfOutputPath: null,
    pdfFormat: 'A4',
    pdfLandscape: false,
    pdfDisplayHeaderFooter: false,
    pdfHeaderTemplate: null,
    pdfFooterTemplate: null,
    args: [],
};

args.forEach(argument => mapArgToOptions(argument));

function mapArgToOptions(argument) {
    const split = argument.split('=');
    split[0] = split[0].slice(2);

    if (split[0] === 'no-sandbox') {
        options['args'].push('--no-sandbox')
    } else {
        options[split[0]] = split[1];
    }
}

(async () => {
    const fileExists = fs.existsSync(options.filepath);

    if (!fileExists) {
        throw new Error('File does not exists');
    }

    const browser = await puppeteer.launch({headless: true, args: options.args});

    const page = await browser.newPage();
    await page.emulateMediaType('screen');
    await page.goto('file://' + options.filepath);

    await page.waitForTimeout(1000);
    const pdfOptions = {
        path: options.pdfOutputPath,
        format: options.pdfFormat,
        landscape: options.pdfLandscape === 'true' || options.pdfLandscape,
        displayHeaderFooter: options.pdfDisplayHeaderFooter === 'true' || options.pdfDisplayHeaderFooter,
        margin: {
            top: options.pdfMarginTop,
            left: options.pdfMarginLeft,
            right: options.pdfMarginRight,
            bottom: options.pdfMarginBottom,
        }
    };

    if (pdfOptions.displayHeaderFooter) {
        pdfOptions.headerTemplate = options.pdfHeaderTemplate;
        pdfOptions.footerTemplate = options.pdfFooterTemplate;
    }

    await page.pdf(pdfOptions);

    await browser.close();
})();
